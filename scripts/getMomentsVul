#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from __future__ import print_function
from io import open
import numpy as np
from intervul.readpos import VulcanPosMesh
from intervul.general import Submesh
import os
import argparse
import re

def get_direction_from_string(text):
    if text.startswith('['):
        # Separa la lista y normaliza el vector
        text = re.split(' +|, *', text[1:-1])
        text = [float(x) for x in text]
        norm = np.linalg.norm(text)
        text = [x/norm for x in text]
    elif text.lower().startswith('x'):
        text = [1.0, 0, 0]
    elif text.lower().startswith('y'):
        text = [0, 1.0, 0]
    elif text.lower().startswith('z'):
        text = [0, 0, 1.0]
    else:
        raise ValueError("Direction mal formed")

    return text


parser = argparse.ArgumentParser(
    description='Extrae las fuerzas de un set en particular')
parser.add_argument(
        '-s',
        '--set',
        help='Indica de que set quieres obtener la fuerza',
        default=1,
        type=int)
parser.add_argument(
        '-d',
        '--direction',
        help='Define en que dirección se quiere la fuerza.'
             '"x", "y", "z" o "[1.0, 1.0, 1.0]"',
        default='x')
parser.add_argument(
        '-p',
        '--position',
        help='Posicion desde la cual se momenta.'
             '1.0, 1.0, 1.0',
        nargs=3,
        type=float)
parser.add_argument(
        '-l',
        '--listofnodes',
        help='Toma esta lista de nodos para calcular las fuerzas (sobrescribe --set)',
        type=argparse.FileType('r'))
parser.add_argument(
        '-o',
        '--fileOutput',
        help='Indica el nombre del archivo de salida (default: moments.txt)',
        default="moments.txt",
        )
parser.add_argument('fileIn', help="Archivo de dato")

args = parser.parse_args()

filename = args.fileIn
fileout = args.fileOutput
# el set está en forma de base 0 (parte de 0)
setForce = args.set - 1
direction = get_direction_from_string(args.direction)
position = args.position
#print("position", position)
nodesfile = args.listofnodes

data = VulcanPosMesh(filename, VulcanPosMesh.MECHANICAL)
mesh = data.mesh

if nodesfile is not None:
    nodes = np.loadtxt(nodesfile, dtype=int)
else:
    submesh = Submesh(setNum=setForce)
    submesh.getSet(mesh=mesh)
    nodes = submesh.inodeOriginal
print("nodes", nodes)
posInitial = mesh.nodes[nodes]
#print(posInitial)
print(fileout)
firstPass = True
with open(fileout, 'w', encoding='utf-8') as f:
    for istep, result in data:
        if firstPass:
            f.write("# Reaction moment of case\n")
            f.write("# " + result['titleResult'].decode('utf-8').strip() + "\n")
            f.write("# filename: " + filename + "\n")
            if nodesfile:
                f.write("# file of nodes: " + nodesfile.name + "\n")
            else:
                f.write("# set: " + str(setForce + 1) + "\n")
            f.write("# direction: " + str(direction) + "\n")
            f.write("# Time Displacement Moment\n")
            if nodesfile:
                print("Extracting forces for filename " + filename + " in list "
                      "of nodes " + nodesfile.name)
            else:
                print("Extracting forces for filename " + filename + " in set " +
                      str(setForce + 1))
            firstPass = False

        reactionsPerNode = result['reaction'][nodes,:]
#        print("react", reactionsPerNode)
        displacementPerNode = result['displacement'][nodes,:]
#        print("disp", displacementPerNode)
        finalPos = posInitial + displacementPerNode
#        print("finalPos", finalPos)
        relativePos = finalPos - position
#        print("relative", relativePos)
        momentPerNode = np.cross(relativePos, reactionsPerNode)
#        print("momentPerNode", momentPerNode)
        moment = np.einsum("ij,j -> ", momentPerNode, direction)
#        print("moment", moment)
        text = "{:8.3f} {:14.6E}".format(result['TimeValue'], moment)
        print(text)
        f.write(text + "\n")
